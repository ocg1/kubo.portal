package mx.com.kubo.managedbeans;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;

import mx.com.kubo.bean.Amortization;

@ManagedBean
@RequestScoped
public class TablaAmortizacion implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	private Simulator simulador;
	
	private Double ammount;
	private Double rate;
	private Double tax;
	private Integer totalnumPayment;
	private Double comission;
	private String simulationDate;
	private String zoneType;
	private String payment;
	private String frequency;
	private String term;
	
	private String monto;
	private String montoarecibir;
	private String comision;
	private String numPagos;
	private String fechaSim;
	private String zone;
	private String strTasa1;
	private String strTasa2;
	private String cat;
	private String fecCalc;
	
	private Integer term_id ;
	private Double dPayment;
	private Double totalPayment ;
	private String freq;
	
	private boolean safiSimulation;
	
	private ArrayList<Amortization> tamort;
	
	public  Locale locale = new Locale("es","mx");
	public  java.text.NumberFormat dec = java.text.NumberFormat.getCurrencyInstance(locale);
	
	private SimpleDateFormat formatStr = new SimpleDateFormat("EEEE dd' de 'MMMM' de 'yyyy", new Locale("ES"));
	private SimpleDateFormat formatStr1 = new SimpleDateFormat("dd' de 'MMMM' de 'yyyy", new Locale("ES"));
	
	@PostConstruct
	public void init(){
		
		
		try{
			
			
			
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String str = (String) facesContext.getExternalContext().getRequestParameterMap().get("monto");
			
			if(str != null){
			
				ammount = Double.parseDouble( (str).replace(",", "") );
				term_id = Integer.parseInt( (String) facesContext.getExternalContext().getRequestParameterMap().get("term") ) ;
				rate =  Double.parseDouble( (String) facesContext.getExternalContext().getRequestParameterMap().get("rate") );
				dPayment =  Double.parseDouble( ((String) facesContext.getExternalContext().getRequestParameterMap().get("payment")).replace(",", "") );
				totalPayment = Double.parseDouble( ((String) facesContext.getExternalContext().getRequestParameterMap().get("totalPayment")).replace(",", "") );
				freq = (String) facesContext.getExternalContext().getRequestParameterMap().get("frequency");
				cat = (String) facesContext.getExternalContext().getRequestParameterMap().get("cat");
				comision=(String) facesContext.getExternalContext().getRequestParameterMap().get("comision");
				
				String safiSimStr = (String) facesContext.getExternalContext().getRequestParameterMap().get("isSafiSim");
				
				//System.out.println("--- safiSimStr: "+safiSimStr);
				
				if( safiSimStr != null && safiSimStr.equals("S") ){
					safiSimulation = true;
				}else{
					safiSimulation = false;
				}
			
				calculaTabla();
				
//				generaDocTablas();
				
			}
			
		}catch(Exception e){
			
			e.printStackTrace();
			
		}
		
	}
	
	public void calculaTabla(){
		
		try{
			
			fecCalc = formatStr1.format(new Date());
			
			Double tasaconiva = (rate/100)*1.16;
			
			monto = dec.format(ammount);
			
			numPagos = term_id+"";
			fechaSim = formatStr.format(new Date());
			zone = "No Fronteriza";
			strTasa1 = rate+"";
			strTasa2 = ((tasaconiva)*100)+"";
			
			strTasa2 = (((double) Math.round(Double.parseDouble(strTasa2)*100)/100))+"";
			
			
			montoarecibir = dec.format(((100 - Double.parseDouble( comision ) )/100)*ammount);
			
			payment = dec.format(dPayment);
			
			Double lastPayment = totalPayment -( (term_id-1)*dPayment );
			
			Date fecha1 = new Date();
			tamort = new ArrayList<Amortization>();
			
			int terms = term_id-1;
				
			
			
			for(int i = 0;i<(terms);i++){
				
				Amortization amort = new Amortization();
				
				Calendar c1 = Calendar.getInstance(); 
				c1.setTime(fecha1);
				if( isSafiSimulation() ){ 
					
					if(freq.equals("mensuales")){
						
						c1.add(Calendar.MONTH,1);
						
					}else if(freq.equals("semanales")){
						
						c1.add(Calendar.DATE,7);
						
					}else if(freq.equals("catorcenales")){
						
						c1.add(Calendar.DATE,14);
						
					}else if(freq.equals("quincenales")){
						
						//System.out.println("Fecha: " + formatStr.format(c1.getTime()));
						
							if((c1.get(Calendar.DAY_OF_MONTH) < 15 || c1.get(Calendar.DAY_OF_MONTH) > 27)  ){
								
								Calendar c3 = Calendar.getInstance(); 
								
								if(i!=0){
								
									Calendar temporalc1 = Calendar.getInstance();
									temporalc1.setTime(c1.getTime());
									temporalc1.add(Calendar.MONTH, 1);
									c3.set(temporalc1.get(Calendar.YEAR),temporalc1.get(Calendar.MONTH),15);
								}
								else{
									
									c3.set(c1.get(Calendar.YEAR),c1.get(Calendar.MONTH),15);
									
								}
								Integer d1 = getDias(c1.getTime(),c3.getTime());
								//System.out.println("Dias que faltan para la quincena: " + d1);
								
								if(d1<9){
									
									Calendar cc1 = Calendar.getInstance(); 
									cc1.set(c1.get(Calendar.YEAR),c1.get((Calendar.MONTH)),c1.getActualMaximum(Calendar.DAY_OF_MONTH));
									c1 = null;
									c1 = Calendar.getInstance(); 
									c1.setTime(cc1.getTime());
									
								}else{
									
									
									
									c1 = null;
									c1 = Calendar.getInstance(); 
									c1.setTime(c3.getTime());
									
								}
								
							}
							else{
								
								Calendar c4 = Calendar.getInstance(); 
								c4.set(c1.get(Calendar.YEAR),c1.get(Calendar.MONTH),c1.getActualMaximum(Calendar.DAY_OF_MONTH));
								
								Integer d1 = getDias(c1.getTime(),c4.getTime());
								//System.out.println("Dias que faltan para fin de mes: " + d1);
								
								if(d1<9){
									
									c1.add( Calendar.DATE, (d1+15) );
								}else{
									
									c1.setTime(c4.getTime());
										
								}
								
							}
						
					}
				
				}else{
					
					if(freq.equals("mensuales")){
					
						c1.add(Calendar.DATE,30);
						
					}else if(freq.equals("semanales")){
						
						c1.add(Calendar.DATE,7);
						
					}else if(freq.equals("catorcenales")){
						
						c1.add(Calendar.DATE,14);
						
					}else if(freq.equals("quincenales")){
						
						c1.add(Calendar.DATE,15);
						
					}
					
				}
				
			
				
					Date fecha2 = c1.getTime();
					
					
					Integer dias = getDias(fecha1 ,fecha2);
					
					Double interes = (ammount*tasaconiva*dias)/360;
					
					interes = ((double) Math.round(interes*1000)/1000);
					
					Double capital = dPayment-interes;
					
					capital = ((double) Math.round(capital*100)/100);
					
					ammount = ammount - capital;
					
					ammount = ((double) Math.round(ammount*100)/100);
					
					//System.out.println(ammount + "  -  " + capital	+"  -  "+interes+"  -  "+dias+"  -  "+dPayment);
					fecha1 = fecha2;
					
					amort.setBalance(dec.format(ammount));
					amort.setCapital(dec.format(capital));
					amort.setInterest(dec.format(interes));
					amort.setPayment(dec.format(dPayment));
					amort.setNumCuota((i+1)+"");
					
					tamort.add(amort);
				
			}
			
			
			if( isSafiSimulation() ){
			
				Double interes = (lastPayment - ammount);
				
				interes = ((double) Math.round(interes*1000)/1000);
				
				Double capital = lastPayment -interes;
				
				capital = ((double) Math.round(capital*100)/100);
				
				ammount = ammount - capital;
				
				ammount = ((double) Math.round(ammount*100)/100);
				
				//System.out.println(ammount + "  -  " + capital	+"  -  "+interes+"  -  jjjj  -  "+lastPayment);
				
				Amortization amort = new Amortization();
				
				amort.setBalance(dec.format(ammount));
				amort.setCapital(dec.format(capital));
				amort.setInterest(dec.format(interes));
				amort.setPayment(dec.format(lastPayment));
				amort.setNumCuota((term_id)+"");
				
				tamort.add(amort);
			
			}else{
				
				Amortization amort = new Amortization();
				
				Calendar c1 = Calendar.getInstance(); 
				c1.setTime(fecha1);
				
				if(freq.equals("mensuales")){
					
					c1.add(Calendar.DATE,30);
					
				}else if(freq.equals("semanales")){
					
					c1.add(Calendar.DATE,7);
					
				}else if(freq.equals("catorcenales")){
					
					c1.add(Calendar.DATE,14);
					
				}else if(freq.equals("quincenales")){
					
					c1.add(Calendar.DATE,15);
					
				}
				
				Date fecha2 = c1.getTime();
				
				
				Integer dias = getDias(fecha1 ,fecha2);
				
				Double interes = (ammount*tasaconiva*dias)/360;
				
				interes = ((double) Math.round(interes*1000)/1000);
				
				Double capital = ammount;
				
				capital = ((double) Math.round(capital*100)/100);
				
				ammount = ammount - capital;
				
				ammount = ((double) Math.round(ammount*100)/100);
				
				//System.out.println(ammount + "  -  " + capital	+"  -  "+interes+"  -  "+dias+"  -  "+dPayment);
				fecha1 = fecha2;
				
				amort.setBalance(dec.format(ammount));
				amort.setCapital(dec.format(capital));
				amort.setInterest(dec.format(interes));
				amort.setPayment(dec.format(((capital+interes))));
				amort.setNumCuota((term_id)+"");
				
				tamort.add(amort);
				
			}
			
			setFrequency(freq.equals("mensuales")?"Mensual":freq.equals("catorcenales")?"Catorcenal":freq.equals("quincenales")?"Quincenal":freq.equals("semanales")?"Semanal":"");
			
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}

	public Double getAmmount() {
		return ammount;
	}

	public void setAmmount(Double ammount) {
		this.ammount = ammount;
	}

	public Double getRate() {
		return rate;
	}

	public void setRate(Double rate) {
		this.rate = rate;
	}

	public Double getTax() {
		return tax;
	}

	public void setTax(Double tax) {
		this.tax = tax;
	}

	public Integer getTotalnumPayment() {
		return totalnumPayment;
	}

	public void setTotalnumPayment(Integer totalnumPayment) {
		this.totalnumPayment = totalnumPayment;
	}

	public Double getComission() {
		return comission;
	}

	public void setComission(Double comission) {
		this.comission = comission;
	}

	public String getSimulationDate() {
		return simulationDate;
	}

	public void setSimulationDate(String simulationDate) {
		this.simulationDate = simulationDate;
	}

	public String getZoneType() {
		return zoneType;
	}

	public void setZoneType(String zoneType) {
		this.zoneType = zoneType;
	}

	public String getPayment() {
		return payment;
	}

	public void setPayment(String payment) {
		this.payment = payment;
	}

	public String getFrequency() {
		return frequency;
	}

	public void setFrequency(String frequency) {
		this.frequency = frequency;
	}

	public String getTerm() {
		return term;
	}

	public void setTerm(String term) {
		this.term = term;
	}
	
	
	public Integer getDias(Date fecha1, Date fecha2){
	
		GregorianCalendar date1 = new GregorianCalendar();
        date1.setTime(fecha1);
        GregorianCalendar date2 = new GregorianCalendar();
        date2.setTime(fecha2);
        int rangoAnyos = 0;
        Integer rango =0;
        /* COMPROBAMOS SI ESTAMOS EN EL MISMO ANYO */
        if (date1.get(Calendar.YEAR) == date2.get(Calendar.YEAR)) {
        	
        	rango = (date2.get(Calendar.DAY_OF_YEAR) - date1.get(Calendar.DAY_OF_YEAR));
        	
        } else {
            /* SI ESTAMOS EN DISTINTO ANYO COMPROBAMOS QUE EL ANYO DEL DATEINI NO SEA BISIESTO
             * SI ES BISIESTO SON 366 DIAS EL ANYO
             * SINO SON 365
             */
            int diasAnyo = date1.isLeapYear(date1.get(Calendar.YEAR)) ? 366 : 365;

            /* CALCULAMOS EL RANGO DE ANYOS */
            rangoAnyos = date2.get(Calendar.YEAR) - date1.get(Calendar.YEAR);

            /* CALCULAMOS EL RANGO DE DIAS QUE HAY */
            rango = (rangoAnyos * diasAnyo) + (date2.get(Calendar.DAY_OF_YEAR) - date1.get(Calendar.DAY_OF_YEAR));

        }
		
		return rango;
		
	}

	public ArrayList<Amortization> getTamort() {
		return tamort;
	}

	public void setTamort(ArrayList<Amortization> tamort) {
		this.tamort = tamort;
	}

	public String getMonto() {
		return monto;
	}

	public void setMonto(String monto) {
		this.monto = monto;
	}

	public String getComision() {
		return comision;
	}

	public void setComision(String comision) {
		this.comision = comision;
	}

	public String getNumPagos() {
		return numPagos;
	}

	public void setNumPagos(String numPagos) {
		this.numPagos = numPagos;
	}

	public String getFechaSim() {
		return fechaSim;
	}

	public void setFechaSim(String fechaSim) {
		this.fechaSim = fechaSim;
	}

	public String getZone() {
		return zone;
	}

	public void setZone(String zone) {
		this.zone = zone;
	}

	public String getStrTasa1() {
		return strTasa1;
	}

	public void setStrTasa1(String strTasa1) {
		this.strTasa1 = strTasa1;
	}

	public String getStrTasa2() {
		return strTasa2;
	}

	public void setStrTasa2(String strTasa2) {
		this.strTasa2 = strTasa2;
	}

	public String getMontoarecibir() {
		return montoarecibir;
	}

	public void setMontoarecibir(String montoarecibir) {
		this.montoarecibir = montoarecibir;
	}

	public String getCat() {
		return cat;
	}

	public void setCat(String cat) {
		this.cat = cat;
	}

	public String getFecCalc() {
		return fecCalc;
	}

	public void setFecCalc(String fecCalc) {
		this.fecCalc = fecCalc;
	}

	public boolean isSafiSimulation() {
		return safiSimulation;
	}

	public void setSafiSimulation(boolean safiSimulation) {
		this.safiSimulation = safiSimulation;
	}

	public Integer getTerm_id() {
		return term_id;
	}

	public void setTerm_id(Integer term_id) {
		this.term_id = term_id;
	}

	public Double getdPayment() {
		return dPayment;
	}

	public void setdPayment(Double dPayment) {
		this.dPayment = dPayment;
	}

	public Double getTotalPayment() {
		return totalPayment;
	}

	public void setTotalPayment(Double totalPayment) {
		this.totalPayment = totalPayment;
	}

	public String getFreq() {
		return freq;
	}

	public void setFreq(String freq) {
		this.freq = freq;
	}
	
	public void generaDocTablas(){
		
		String nombreArchivo = "/opt/pruebaTablaAmortizacion.csv";
        StringBuilder texto = new StringBuilder();
        
        
        try{
        	
        	//System.out.println( "INICIANDO ... " );
        	
        	FacesContext faces      = FacesContext.getCurrentInstance();
    		
    		ELContext elContext = faces.getELContext();
    		
    		simulador = (Simulator) faces
    				.getApplication().getELResolver()
    				.getValue(elContext, null, "simulator");
        	
//    		String[] terms = {	"4,7,9,12,14,16,18,20,22,24,27,29,31,33,36",
//    							"8,14,18,24,28,32,36,40,44,48,54,58,62,66,72",
//    							"16,28,40,52,60,69,78,86,95,104,113,124,134,145,156"};
    		
//    		String[] terms = {	"145,156"};
    		
    		String[] terms = {	"4,7,9,12,14" };
    		
    		String[] frequencys = {	"2" };
    		
    		String[] frequencysName = {	"catorcenales" };
    		
    		int i=0;
    		
    		for( i=0 ; i<frequencys.length ; i++ ){
    		
    			String[] terms_1 = terms[i].split(",");
    			
    			texto.append(  frequencysName[i].toUpperCase() +"  \n" );
    			
    		for( String t : terms_1 ){
    		
    			simulador.setAmmount(10000D);
    			simulador.setTasaTotal(17.9D);
    			simulador.setFrequency_id( Integer.parseInt( frequencys[i] ) ); //*
    			simulador.setTerm_id(Integer.parseInt(t)); //*
    			
    			simulador.simulaCred(false);
    			
    			
    			// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    			
    			ammount = 	simulador.getAmmount();
				term_id = 	simulador.getTerm_id() ;
				rate    =  	simulador.getTasaTotal();
				dPayment =  simulador.getMontoCuota();
				totalPayment = simulador.getTotalPagar();
				freq = frequencysName[i];
				comision="5.0";
				
				/*
				 
				 if(freq.equals("mensuales")){
						
						c1.add(Calendar.MONTH,1);
						
					}else if(freq.equals("semanales")){
						
						c1.add(Calendar.DATE,7);
						
					}else if(freq.equals("catorcenales")){
						
						c1.add(Calendar.DATE,14);
						
					}else if(freq.equals("quincenales")){
				 
				 * */
				
				//cat = simulador.getCatStr();
				
				safiSimulation = false;
				
				calculaTabla();
    			
				simulador.calculaCat(safiSimulation);
				
				cat = simulador.getCatStr();
				
    			// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    			
				texto.append( simulador.getAmmountStr() + " A "+ simulador.getTerm_id()  +" PAGOS "+ freq.toUpperCase() +"  \n" );
				
				texto.append( "CUOTA;" );
				texto.append( "CAPITAL;" );
				texto.append( "INTERES;" );
				
				texto.append( "IVA;" );
				
				texto.append( "PAGO;" );
				
				texto.append( "CAT\n" );
				
				for(Amortization a : tamort){
					
					texto.append( a.getNumCuota() + ";" );
					
					texto.append( a.getCapital()+ ";" );
					
					Double int_iva = Double.parseDouble( a.getInterest().replace("$", "").replace(",", "") );
					
					Double interes = int_iva/1.16;
					
					Double iva = int_iva - interes;
					
					texto.append( dec.format(interes) + ";" );
					
					texto.append( dec.format(iva) + ";" );
					
					texto.append( a.getPayment() + ";" );
					
					texto.append( cat + "\n" );
				}
				
				texto.append( "\n" );
				texto.append( "\n" );
    		}//*
    		
    		texto.append( "\n" );
			texto.append( "\n" );
    		
    		}
    		
    		
	            FileWriter fwriter = new FileWriter(nombreArchivo);
	            fwriter.write('\ufeff'); //si no se escribe esto, excel no muestra bien el texto con tildes
	            fwriter.write(texto.toString());
	            fwriter.flush();
	            fwriter.close();
            
	            
//	            System.out.println("*****************************************************************************");
//	    		System.out.println("*********************FINALIZA*DOCUMENTO**************************************");
//	    		System.out.println("*****************************************************************************");
    		
        }catch (IOException e){
          
        	e.printStackTrace();
        	
        }
		
	}
	
}
